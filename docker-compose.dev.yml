services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: "${REGISTRY}${CONTAINER_NAME}:${TAG}"
    container_name: ${CONTAINER_NAME}
    environment:
      - NODE_ENV=development
    env_file:
      - .env.dev
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/home/node/app
      # - /home/node/app/node_modules  # Menghindari konflik node_modules
    restart: always
    command: ["sh", "/home/node/app/entrypoint.sh", "nodemon", "server.js"]

    # entrypoint: ["/bin/sh", "-c", "npx prisma migrate dev && npm run dev"]
    # command: >
    #     /bin/sh -c "
    #     echo '⏳ Waiting for PostgreSQL to be ready...';
    #     until pg_isready -h db -p 5432 -U ${DB_USERNAME}; do
    #       sleep 2;
    #     done;
    #     echo '✅ Database is ready!';
    #     npx prisma migrate dev;
    #     npm run dev;
    #     "


  db:
    image: postgres:16
    container_name: ${DB_DATABASE}
    ports:
      - "${DB_PORT}:5432"  # Tetap 5432 di dalam container
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      PGPORT: 5432  # Tidak perlu ganti PGPORT di dalam container
      TZ: Asia/Jakarta
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USERNAME}", "-d", "${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
